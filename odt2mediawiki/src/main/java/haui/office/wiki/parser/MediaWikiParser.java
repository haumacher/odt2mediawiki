/* Generated By:JavaCC: Do not edit this line. MediaWikiParser.java */
package haui.office.wiki.parser;

import java.util.ArrayList;

public class MediaWikiParser extends MediaWikiParserBase implements MediaWikiParserConstants {
        private ArrayList<Token> lineBuffer = new ArrayList<Token>();

  final public void table() throws ParseException {
    jj_consume_token(TABLE_BEGIN);
                       push("table");
    rowAttributes();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_ROW:
      case TABLE_HEAD_I:
      case TABLE_CELL_I:
      case TABLE_CAPTION:
      case TABLE_CELL:
      case TABLE_HEAD:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_CAPTION:
        jj_consume_token(TABLE_CAPTION);
                                 push("caption");
        wikiLineContents();
        eol();
                                                                              pop("caption");
        wikiCellText();
        break;
      case TABLE_ROW:
        jj_consume_token(TABLE_ROW);
                             popExcluding("table"); push("row");
        rowAttributes();
        break;
      case TABLE_HEAD_I:
      case TABLE_CELL_I:
      case TABLE_CELL:
      case TABLE_HEAD:
        tableCell();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_END:
      jj_consume_token(TABLE_END);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               pop("table");
  }

  final public void tableCell() throws ParseException {
    tableLine();
    eol();
    wikiCellText();
  }

  final public void tableLine() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_HEAD_I:
    case TABLE_CELL_I:
      tableLineHead();
      tableInlineCell();
      break;
    case TABLE_CELL:
    case TABLE_HEAD:
      tableCellSeparator();
      cellText();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_CELL:
      case TABLE_HEAD:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      tableCellSeparator();
      tableInlineCell();
    }
  }

  final public void tableInlineCell() throws ParseException {
    if (jj_2_1(2147483647)) {
      attributes();
      jj_consume_token(PIPE);
      cellText();
    } else {
      cellText();
    }
  }

  final public Token paragraphClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_BEGIN:
      r = jj_consume_token(TABLE_BEGIN);
      break;
    case TABLE_ROW:
    case TABLE_HEAD_I:
    case TABLE_CELL_I:
    case TABLE_CAPTION:
    case TABLE_CELL:
    case TABLE_HEAD:
      r = tableContentClasses();
      break;
    case TABLE_END:
      r = jj_consume_token(TABLE_END);
      break;
    case HEADING_START:
      r = jj_consume_token(HEADING_START);
      break;
    case PRE:
      r = jj_consume_token(PRE);
      break;
    case BULLET:
    case HASH:
    case INDENT:
      r = listClasses();
      break;
    case PARAGRAPH_TEXT:
    case LINE_TEXT:
    case OPEN_WIKI_LINK_RAW:
    case OPEN_WIKI_LINK:
    case OPEN_EXTERNAL_LINK:
    case CLOSE_WIKI_LINK:
    case CLOSE_EXTERNAL_LINK:
    case OPEN_PENTUPLE_CURLY:
    case OPEN_TEMPLATE4:
    case OPEN_TEMPLATE_VAR:
    case OPEN_TEMPLATE2:
    case CLOSE_PENTUPLE_CURLY:
    case CLOSE_TEMPLATE4:
    case CLOSE_TEMPLATE_VAR:
    case CLOSE_TEMPLATE2:
    case BOLD_ITALICS:
    case BOLD:
    case ITALICS:
    case BEGIN_EXTENSION:
    case END_EXTENSION:
    case BEGIN_COMMENT:
    case URL:
    case HEADING_END:
    case PIPE:
    case COMMENT_TEXT:
    case END_COMMENT:
    case EXTENSION_NAME:
    case EXTENSION_ASSIGN:
    case EXTENSION_VALUE:
    case EXTENSION_SPACE:
    case EXTENSION_CLOSE:
    case EXTENSION_CANCEL:
    case APOSTROHE_TEXT:
      r = textClasses();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token tableContentClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_CAPTION:
      r = jj_consume_token(TABLE_CAPTION);
      break;
    case TABLE_ROW:
      r = jj_consume_token(TABLE_ROW);
      break;
    case TABLE_HEAD:
      r = jj_consume_token(TABLE_HEAD);
      break;
    case TABLE_HEAD_I:
      r = jj_consume_token(TABLE_HEAD_I);
      break;
    case TABLE_CELL:
      r = jj_consume_token(TABLE_CELL);
      break;
    case TABLE_CELL_I:
      r = jj_consume_token(TABLE_CELL_I);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token listClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BULLET:
      r = jj_consume_token(BULLET);
      break;
    case HASH:
      r = jj_consume_token(HASH);
      break;
    case INDENT:
      r = jj_consume_token(INDENT);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void attributes() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_TEXT:
      case OPEN_WIKI_LINK_RAW:
      case OPEN_WIKI_LINK:
      case OPEN_EXTERNAL_LINK:
      case CLOSE_WIKI_LINK:
      case CLOSE_EXTERNAL_LINK:
      case OPEN_PENTUPLE_CURLY:
      case OPEN_TEMPLATE4:
      case OPEN_TEMPLATE_VAR:
      case OPEN_TEMPLATE2:
      case CLOSE_PENTUPLE_CURLY:
      case CLOSE_TEMPLATE4:
      case CLOSE_TEMPLATE_VAR:
      case CLOSE_TEMPLATE2:
      case BOLD_ITALICS:
      case BOLD:
      case ITALICS:
      case BEGIN_EXTENSION:
      case END_EXTENSION:
      case BEGIN_COMMENT:
      case URL:
      case HEADING_END:
      case COMMENT_TEXT:
      case END_COMMENT:
      case EXTENSION_NAME:
      case EXTENSION_ASSIGN:
      case EXTENSION_VALUE:
      case EXTENSION_SPACE:
      case EXTENSION_CLOSE:
      case EXTENSION_CANCEL:
      case APOSTROHE_TEXT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      attributeContentClasses();
    }
  }

  final public void rowAttributes() throws ParseException {
        Token n, v;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE_NAME:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      n = jj_consume_token(ATTRIBUTE_NAME);
                            push("attribute"); set("name", n.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        v = jj_consume_token(ATTRIBUTE_VALUE);
                                     set("value", v.image.substring(1, v.image.length() - 1));
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
         pop();
    }
  }

  final public Token textClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAGRAPH_TEXT:
      r = jj_consume_token(PARAGRAPH_TEXT);
      break;
    case LINE_TEXT:
    case OPEN_WIKI_LINK_RAW:
    case OPEN_WIKI_LINK:
    case OPEN_EXTERNAL_LINK:
    case CLOSE_WIKI_LINK:
    case CLOSE_EXTERNAL_LINK:
    case OPEN_PENTUPLE_CURLY:
    case OPEN_TEMPLATE4:
    case OPEN_TEMPLATE_VAR:
    case OPEN_TEMPLATE2:
    case CLOSE_PENTUPLE_CURLY:
    case CLOSE_TEMPLATE4:
    case CLOSE_TEMPLATE_VAR:
    case CLOSE_TEMPLATE2:
    case BOLD_ITALICS:
    case BOLD:
    case ITALICS:
    case BEGIN_EXTENSION:
    case END_EXTENSION:
    case BEGIN_COMMENT:
    case URL:
    case HEADING_END:
    case PIPE:
    case COMMENT_TEXT:
    case END_COMMENT:
    case EXTENSION_NAME:
    case EXTENSION_ASSIGN:
    case EXTENSION_VALUE:
    case EXTENSION_SPACE:
    case EXTENSION_CLOSE:
    case EXTENSION_CANCEL:
    case APOSTROHE_TEXT:
      r = textContentClasses();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token textContentClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_TEXT:
    case OPEN_WIKI_LINK_RAW:
    case OPEN_WIKI_LINK:
    case OPEN_EXTERNAL_LINK:
    case CLOSE_WIKI_LINK:
    case CLOSE_EXTERNAL_LINK:
    case OPEN_PENTUPLE_CURLY:
    case OPEN_TEMPLATE4:
    case OPEN_TEMPLATE_VAR:
    case OPEN_TEMPLATE2:
    case CLOSE_PENTUPLE_CURLY:
    case CLOSE_TEMPLATE4:
    case CLOSE_TEMPLATE_VAR:
    case CLOSE_TEMPLATE2:
    case BOLD_ITALICS:
    case BOLD:
    case ITALICS:
    case BEGIN_EXTENSION:
    case END_EXTENSION:
    case BEGIN_COMMENT:
    case URL:
    case HEADING_END:
    case COMMENT_TEXT:
    case END_COMMENT:
    case EXTENSION_NAME:
    case EXTENSION_ASSIGN:
    case EXTENSION_VALUE:
    case EXTENSION_SPACE:
    case EXTENSION_CLOSE:
    case EXTENSION_CANCEL:
    case APOSTROHE_TEXT:
      r = attributeContentClasses();
      break;
    case PIPE:
      r = attributeSeparator();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Token attributeContentClasses() throws ParseException {
        Token r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_TEXT:
      r = jj_consume_token(LINE_TEXT);
      break;
    case URL:
      r = jj_consume_token(URL);
      break;
    case OPEN_WIKI_LINK_RAW:
      r = jj_consume_token(OPEN_WIKI_LINK_RAW);
      break;
    case OPEN_WIKI_LINK:
      r = jj_consume_token(OPEN_WIKI_LINK);
      break;
    case OPEN_EXTERNAL_LINK:
      r = jj_consume_token(OPEN_EXTERNAL_LINK);
      break;
    case CLOSE_WIKI_LINK:
      r = jj_consume_token(CLOSE_WIKI_LINK);
      break;
    case CLOSE_EXTERNAL_LINK:
      r = jj_consume_token(CLOSE_EXTERNAL_LINK);
      break;
    case OPEN_PENTUPLE_CURLY:
      r = jj_consume_token(OPEN_PENTUPLE_CURLY);
      break;
    case OPEN_TEMPLATE4:
      r = jj_consume_token(OPEN_TEMPLATE4);
      break;
    case OPEN_TEMPLATE_VAR:
      r = jj_consume_token(OPEN_TEMPLATE_VAR);
      break;
    case OPEN_TEMPLATE2:
      r = jj_consume_token(OPEN_TEMPLATE2);
      break;
    case CLOSE_PENTUPLE_CURLY:
      r = jj_consume_token(CLOSE_PENTUPLE_CURLY);
      break;
    case CLOSE_TEMPLATE4:
      r = jj_consume_token(CLOSE_TEMPLATE4);
      break;
    case CLOSE_TEMPLATE_VAR:
      r = jj_consume_token(CLOSE_TEMPLATE_VAR);
      break;
    case CLOSE_TEMPLATE2:
      r = jj_consume_token(CLOSE_TEMPLATE2);
      break;
    case BOLD_ITALICS:
      r = jj_consume_token(BOLD_ITALICS);
      break;
    case BOLD:
      r = jj_consume_token(BOLD);
      break;
    case ITALICS:
      r = jj_consume_token(ITALICS);
      break;
    case BEGIN_EXTENSION:
      r = jj_consume_token(BEGIN_EXTENSION);
      break;
    case END_EXTENSION:
      r = jj_consume_token(END_EXTENSION);
      break;
    case BEGIN_COMMENT:
      r = jj_consume_token(BEGIN_COMMENT);
      break;
    case HEADING_END:
      r = jj_consume_token(HEADING_END);
      break;
    case COMMENT_TEXT:
      r = jj_consume_token(COMMENT_TEXT);
      break;
    case END_COMMENT:
      r = jj_consume_token(END_COMMENT);
      break;
    case EXTENSION_NAME:
      r = jj_consume_token(EXTENSION_NAME);
      break;
    case EXTENSION_ASSIGN:
      r = jj_consume_token(EXTENSION_ASSIGN);
      break;
    case EXTENSION_VALUE:
      r = jj_consume_token(EXTENSION_VALUE);
      break;
    case EXTENSION_SPACE:
      r = jj_consume_token(EXTENSION_SPACE);
      break;
    case EXTENSION_CLOSE:
      r = jj_consume_token(EXTENSION_CLOSE);
      break;
    case EXTENSION_CANCEL:
      r = jj_consume_token(EXTENSION_CANCEL);
      break;
    case APOSTROHE_TEXT:
      r = jj_consume_token(APOSTROHE_TEXT);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void tableCellSeparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_HEAD:
      jj_consume_token(TABLE_HEAD);
                      pushSimple("table", "row", "cell"); set("heading", "true");
      break;
    case TABLE_CELL:
      jj_consume_token(TABLE_CELL);
                      pushSimple("table", "row", "cell");
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tableLineHead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE_HEAD_I:
      jj_consume_token(TABLE_HEAD_I);
                        pushSimple("table", "row", "cell"); set("heading", "true");
      break;
    case TABLE_CELL_I:
      jj_consume_token(TABLE_CELL_I);
                        pushSimple("table", "row", "cell");
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void cellText() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_TEXT:
      case OPEN_WIKI_LINK_RAW:
      case OPEN_WIKI_LINK:
      case OPEN_EXTERNAL_LINK:
      case CLOSE_WIKI_LINK:
      case CLOSE_EXTERNAL_LINK:
      case OPEN_PENTUPLE_CURLY:
      case OPEN_TEMPLATE4:
      case OPEN_TEMPLATE_VAR:
      case OPEN_TEMPLATE2:
      case CLOSE_PENTUPLE_CURLY:
      case CLOSE_TEMPLATE4:
      case CLOSE_TEMPLATE_VAR:
      case CLOSE_TEMPLATE2:
      case BOLD_ITALICS:
      case BOLD:
      case ITALICS:
      case BEGIN_EXTENSION:
      case END_EXTENSION:
      case BEGIN_COMMENT:
      case URL:
      case HEADING_END:
      case PIPE:
      case COMMENT_TEXT:
      case END_COMMENT:
      case EXTENSION_NAME:
      case EXTENSION_ASSIGN:
      case EXTENSION_VALUE:
      case EXTENSION_SPACE:
      case EXTENSION_CLOSE:
      case EXTENSION_CANCEL:
      case APOSTROHE_TEXT:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      textContentClasses();
    }
  }

  final public Token attributeSeparator() throws ParseException {
        Token r;
    r = jj_consume_token(PIPE);
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public void listLine() throws ParseException {
         push("list");
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BULLET:
        jj_consume_token(BULLET);
                                  push("bullet");
        break;
      case HASH:
        jj_consume_token(HASH);
                                  push("number");
        break;
      case INDENT:
        jj_consume_token(INDENT);
                                  push("indent");
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_6;
      }
    }
    wikiLineContents();
    eol();
         pop("list");
  }

  final public void preformattedLine() throws ParseException {
         push("code");
    jj_consume_token(PRE);
    wikiLineContents();
    eol();
         pop("code");
  }

  final public void headingLine() throws ParseException {
         push("heading");
    jj_consume_token(HEADING_START);
    wikiLineContents();
    eol();
         pop("heading");
  }

  final public void textLine() throws ParseException {
         push("paragraph");
    textClasses();
    wikiLineContents();
    eol();
         pop("paragraph");
  }

  final public void misplacedTableLine() throws ParseException {
    tableContentClasses();
    wikiLineContents();
    eol();
  }

  final public void wikiParagraph() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADING_START:
    case PRE:
    case BULLET:
    case HASH:
    case INDENT:
    case PARAGRAPH_TEXT:
    case LINE_TEXT:
    case OPEN_WIKI_LINK_RAW:
    case OPEN_WIKI_LINK:
    case OPEN_EXTERNAL_LINK:
    case CLOSE_WIKI_LINK:
    case CLOSE_EXTERNAL_LINK:
    case OPEN_PENTUPLE_CURLY:
    case OPEN_TEMPLATE4:
    case OPEN_TEMPLATE_VAR:
    case OPEN_TEMPLATE2:
    case CLOSE_PENTUPLE_CURLY:
    case CLOSE_TEMPLATE4:
    case CLOSE_TEMPLATE_VAR:
    case CLOSE_TEMPLATE2:
    case BOLD_ITALICS:
    case BOLD:
    case ITALICS:
    case BEGIN_EXTENSION:
    case END_EXTENSION:
    case BEGIN_COMMENT:
    case URL:
    case HEADING_END:
    case PIPE:
    case COMMENT_TEXT:
    case END_COMMENT:
    case EXTENSION_NAME:
    case EXTENSION_ASSIGN:
    case EXTENSION_VALUE:
    case EXTENSION_SPACE:
    case EXTENSION_CLOSE:
    case EXTENSION_CANCEL:
    case APOSTROHE_TEXT:
      wikiCellParagraph();
      break;
    case TABLE_BEGIN:
      table();
      break;
    case TABLE_ROW:
    case TABLE_HEAD_I:
    case TABLE_CELL_I:
    case TABLE_CAPTION:
    case TABLE_CELL:
    case TABLE_HEAD:
      misplacedTableLine();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// "wikiParagraph excluding table() and tableLine()"
  final public void wikiCellParagraph() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAGRAPH_TEXT:
    case LINE_TEXT:
    case OPEN_WIKI_LINK_RAW:
    case OPEN_WIKI_LINK:
    case OPEN_EXTERNAL_LINK:
    case CLOSE_WIKI_LINK:
    case CLOSE_EXTERNAL_LINK:
    case OPEN_PENTUPLE_CURLY:
    case OPEN_TEMPLATE4:
    case OPEN_TEMPLATE_VAR:
    case OPEN_TEMPLATE2:
    case CLOSE_PENTUPLE_CURLY:
    case CLOSE_TEMPLATE4:
    case CLOSE_TEMPLATE_VAR:
    case CLOSE_TEMPLATE2:
    case BOLD_ITALICS:
    case BOLD:
    case ITALICS:
    case BEGIN_EXTENSION:
    case END_EXTENSION:
    case BEGIN_COMMENT:
    case URL:
    case HEADING_END:
    case PIPE:
    case COMMENT_TEXT:
    case END_COMMENT:
    case EXTENSION_NAME:
    case EXTENSION_ASSIGN:
    case EXTENSION_VALUE:
    case EXTENSION_SPACE:
    case EXTENSION_CLOSE:
    case EXTENSION_CANCEL:
    case APOSTROHE_TEXT:
      textLine();
      break;
    case HEADING_START:
      headingLine();
      break;
    case BULLET:
    case HASH:
    case INDENT:
      listLine();
      break;
    case PRE:
      preformattedLine();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void wikiLineContents() throws ParseException {
        Token k;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_BEGIN:
      case TABLE_ROW:
      case TABLE_HEAD_I:
      case TABLE_CELL_I:
      case TABLE_CAPTION:
      case TABLE_END:
      case HEADING_START:
      case PRE:
      case BULLET:
      case HASH:
      case INDENT:
      case PARAGRAPH_TEXT:
      case LINE_TEXT:
      case OPEN_WIKI_LINK_RAW:
      case OPEN_WIKI_LINK:
      case OPEN_EXTERNAL_LINK:
      case CLOSE_WIKI_LINK:
      case CLOSE_EXTERNAL_LINK:
      case OPEN_PENTUPLE_CURLY:
      case OPEN_TEMPLATE4:
      case OPEN_TEMPLATE_VAR:
      case OPEN_TEMPLATE2:
      case CLOSE_PENTUPLE_CURLY:
      case CLOSE_TEMPLATE4:
      case CLOSE_TEMPLATE_VAR:
      case CLOSE_TEMPLATE2:
      case BOLD_ITALICS:
      case BOLD:
      case ITALICS:
      case BEGIN_EXTENSION:
      case END_EXTENSION:
      case BEGIN_COMMENT:
      case URL:
      case HEADING_END:
      case TABLE_CELL:
      case TABLE_HEAD:
      case PIPE:
      case COMMENT_TEXT:
      case END_COMMENT:
      case EXTENSION_NAME:
      case EXTENSION_ASSIGN:
      case EXTENSION_VALUE:
      case EXTENSION_SPACE:
      case EXTENSION_CLOSE:
      case EXTENSION_CANCEL:
      case APOSTROHE_TEXT:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      k = paragraphClasses();
                        lineBuffer.add(k);
    }
  }

  final public void wikiLink() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_WIKI_LINK_RAW:
      jj_consume_token(OPEN_WIKI_LINK_RAW);
      break;
    case OPEN_WIKI_LINK:
      jj_consume_token(OPEN_WIKI_LINK);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LINE_TEXT);
    jj_consume_token(PIPE);
  }

  final public void externalLink() throws ParseException {
    jj_consume_token(OPEN_EXTERNAL_LINK);
    jj_consume_token(URL);
  }

  final public ExtensionTag extension() throws ParseException {
        Token type;
        Token name;
        Token attName;
        Token attValue;

        Token t;
        int sizeBefore = lineBuffer.size();
        ExtensionTag result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_EXTENSION:
      type = jj_consume_token(BEGIN_EXTENSION);
      break;
    case END_EXTENSION:
      type = jj_consume_token(END_EXTENSION);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         lineBuffer.add(type);
    name = jj_consume_token(EXTENSION_NAME);
         lineBuffer.add(name);
         result = new ExtensionTag(type.kind == BEGIN_EXTENSION, name.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENSION_SPACE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(EXTENSION_SPACE);
                 lineBuffer.add(t);
      attName = jj_consume_token(EXTENSION_NAME);
                 lineBuffer.add(attName);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENSION_SPACE:
        t = jj_consume_token(EXTENSION_SPACE);
                         lineBuffer.add(t);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      t = jj_consume_token(EXTENSION_ASSIGN);
                 lineBuffer.add(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENSION_SPACE:
        t = jj_consume_token(EXTENSION_SPACE);
                         lineBuffer.add(t);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENSION_VALUE:
        attValue = jj_consume_token(EXTENSION_VALUE);
        break;
      case EXTENSION_NAME:
        attValue = jj_consume_token(EXTENSION_NAME);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 lineBuffer.add(attValue);
                 result.addAttribute(attName.image, attValue.image);
    }
    t = jj_consume_token(EXTENSION_CLOSE);
         lineBuffer.add(t);
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  void abortExtension() throws ParseException {
  }

  final public void wikiCellText() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLANK_LINE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(BLANK_LINE);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADING_START:
      case PRE:
      case BULLET:
      case HASH:
      case INDENT:
      case PARAGRAPH_TEXT:
      case LINE_TEXT:
      case OPEN_WIKI_LINK_RAW:
      case OPEN_WIKI_LINK:
      case OPEN_EXTERNAL_LINK:
      case CLOSE_WIKI_LINK:
      case CLOSE_EXTERNAL_LINK:
      case OPEN_PENTUPLE_CURLY:
      case OPEN_TEMPLATE4:
      case OPEN_TEMPLATE_VAR:
      case OPEN_TEMPLATE2:
      case CLOSE_PENTUPLE_CURLY:
      case CLOSE_TEMPLATE4:
      case CLOSE_TEMPLATE_VAR:
      case CLOSE_TEMPLATE2:
      case BOLD_ITALICS:
      case BOLD:
      case ITALICS:
      case BEGIN_EXTENSION:
      case END_EXTENSION:
      case BEGIN_COMMENT:
      case URL:
      case HEADING_END:
      case PIPE:
      case COMMENT_TEXT:
      case END_COMMENT:
      case EXTENSION_NAME:
      case EXTENSION_ASSIGN:
      case EXTENSION_VALUE:
      case EXTENSION_SPACE:
      case EXTENSION_CLOSE:
      case EXTENSION_CANCEL:
      case APOSTROHE_TEXT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      wikiCellParagraph();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLANK_LINE:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_11;
        }
        jj_consume_token(BLANK_LINE);
      }
    }
  }

  final public void wikiText() throws ParseException {
         push("document");
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLANK_LINE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(BLANK_LINE);
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE_BEGIN:
      case TABLE_ROW:
      case TABLE_HEAD_I:
      case TABLE_CELL_I:
      case TABLE_CAPTION:
      case HEADING_START:
      case PRE:
      case BULLET:
      case HASH:
      case INDENT:
      case PARAGRAPH_TEXT:
      case LINE_TEXT:
      case OPEN_WIKI_LINK_RAW:
      case OPEN_WIKI_LINK:
      case OPEN_EXTERNAL_LINK:
      case CLOSE_WIKI_LINK:
      case CLOSE_EXTERNAL_LINK:
      case OPEN_PENTUPLE_CURLY:
      case OPEN_TEMPLATE4:
      case OPEN_TEMPLATE_VAR:
      case OPEN_TEMPLATE2:
      case CLOSE_PENTUPLE_CURLY:
      case CLOSE_TEMPLATE4:
      case CLOSE_TEMPLATE_VAR:
      case CLOSE_TEMPLATE2:
      case BOLD_ITALICS:
      case BOLD:
      case ITALICS:
      case BEGIN_EXTENSION:
      case END_EXTENSION:
      case BEGIN_COMMENT:
      case URL:
      case HEADING_END:
      case TABLE_CELL:
      case TABLE_HEAD:
      case PIPE:
      case COMMENT_TEXT:
      case END_COMMENT:
      case EXTENSION_NAME:
      case EXTENSION_ASSIGN:
      case EXTENSION_VALUE:
      case EXTENSION_SPACE:
      case EXTENSION_CLOSE:
      case EXTENSION_CANCEL:
      case APOSTROHE_TEXT:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      wikiParagraph();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLANK_LINE:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_14;
        }
        jj_consume_token(BLANK_LINE);
      }
    }
         pop("document");
  }

  final public void eol() throws ParseException {
        lineBuffer.clear();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END_OF_LINE_CONTENTS:
      jj_consume_token(END_OF_LINE_CONTENTS);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    return false;
  }

  public MediaWikiParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x78000,0x78000,0x80001,0x30000,0x0,0xb83fc000,0x78000,0x38000000,0x0,0x400000,0x800000,0x80000000,0x0,0x0,0x0,0x30000,0x0,0x38000000,0xb837c000,0xb8300000,0xb83fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb8300000,0x0,0x0,0xb837c000,0x0,0x1,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xc00000,0xc00000,0x0,0xc00000,0xc00000,0xffffffff,0xc00000,0x0,0xfe3fffff,0x0,0x0,0xff3fffff,0xff3fffff,0xfe3fffff,0xc00000,0x0,0xff3fffff,0x0,0xffffffff,0xff3fffff,0xffffffff,0x6,0x60000,0x40000000,0x40000000,0x40000000,0x28000000,0x0,0xff3fffff,0x0,0x0,0xffffffff,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x3,0x0,0x0,0x3,0x3,0x3,0x0,0x0,0x3,0x0,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x3,0x10,0x10,0x3,0x10,0x8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MediaWikiParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MediaWikiParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MediaWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MediaWikiParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MediaWikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MediaWikiParser(MediaWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MediaWikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[69];
    for (int i = 0; i < 69; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
