/* Generated By:JavaCC: Do not edit this line. MediaWikiParserTokenManager.java */
package haui.office.wiki.parser;
import java.util.ArrayList;

public class MediaWikiParserTokenManager implements MediaWikiParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3c000000000L) != 0L)
         {
            jjmatchedKind = 31;
            return 0;
         }
         if ((active0 & 0x200000L) != 0L)
            return 51;
         if ((active0 & 0x1fc0000000000L) != 0L)
         {
            jjmatchedKind = 31;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fc0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xdc0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x4c0000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_6(0, 21, 51);
      case 35:
         return jjStopAtPos(0, 28);
      case 39:
         return jjMoveStringLiteralDfa1_6(0x1c00000000000L);
      case 42:
         return jjStopAtPos(0, 27);
      case 58:
         return jjStopAtPos(0, 29);
      case 60:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_6(0xc000000000000L);
      case 91:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_6(0x600000000L);
      case 93:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_6(0x1000000000L);
      case 123:
         return jjMoveStringLiteralDfa1_6(0x3c000000000L);
      case 125:
         return jjMoveStringLiteralDfa1_6(0x3c0000000000L);
      default :
         return jjMoveNfa_6(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_6(active0, 0x8000000000000L);
      case 39:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0xc00000000000L);
      case 47:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 91:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0x200000000L);
      case 93:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 123:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0x1c000000000L);
      case 125:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0x1c0000000000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private final int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0x400000000000L);
      case 45:
         return jjMoveStringLiteralDfa3_6(active0, 0x8000000000000L);
      case 58:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 123:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0xc000000000L);
      case 125:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private final int jjMoveStringLiteralDfa3_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa4_6(active0, 0x400000000000L);
      case 45:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         break;
      case 123:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_6(active0, 0x4000000000L);
      case 125:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_6(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_6(2, active0);
}
private final int jjMoveStringLiteralDfa4_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         break;
      case 123:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         break;
      case 125:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_6(3, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 33)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(41, 44);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(37, 3);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(32, 2);
                  break;
               case 8:
                  if ((0xcbfffb74ffffdbffL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(4, 19);
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 1:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar != 33)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if (curChar != 33)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar != 61)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0xcfffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 39)
                     kind = 31;
                  break;
               case 11:
                  if (curChar != 47)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0xa7ffc04800000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 19:
                  if (curChar != 47)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0xa7ffc04800000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if (curChar == 10 && kind > 68)
                     kind = 68;
                  break;
               case 27:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 13 && kind > 68)
                     kind = 68;
                  break;
               case 29:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2400L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 31:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(4, 19);
                  break;
               case 32:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(32, 2);
                  break;
               case 33:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if (curChar != 45)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(37, 3);
                  break;
               case 38:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(41, 44);
                  break;
               case 42:
                  if (curChar != 43)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(43);
                  break;
               case 45:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 48:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if (curChar == 124)
                     jjCheckNAdd(46);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 124)
                     jjCheckNAdd(42);
                  if (curChar == 124)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 124)
                     jjCheckNAdd(35);
                  break;
               case 8:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if ((0x2800000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 124)
                     jjCheckNAddTwoStates(42, 46);
                  if (curChar == 124)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddTwoStates(35, 40);
                  }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 124)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 9:
                  if ((0xc7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x2800000000000000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 12:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 34:
                  if (curChar == 124)
                     jjCheckNAdd(35);
                  break;
               case 39:
                  if (curChar != 124)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(40);
                  break;
               case 44:
                  if (curChar == 124)
                     jjCheckNAdd(42);
                  break;
               case 46:
                  if (curChar == 125 && kind > 19)
                     kind = 19;
                  break;
               case 47:
                  if (curChar == 124)
                     jjCheckNAdd(46);
                  break;
               case 49:
                  if (curChar != 124)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(35, 40);
                  break;
               case 50:
                  if (curChar == 124)
                     jjCheckNAddTwoStates(42, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(0, 0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 39)
                     break;
                  kind = 65;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 28);
      case 42:
         return jjStopAtPos(0, 27);
      case 58:
         return jjStopAtPos(0, 29);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000000L) != 0L)
            return 4;
         return -1;
      case 1:
         if ((active0 & 0x400000000000000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_2(0x400000000000000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(3);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(5);
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  jjCheckNAdd(1);
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 45)
                     jjCheckNAdd(3);
                  break;
               case 1:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(1);
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(1);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(3);
                  }
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(1);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 60);
      case 62:
         return jjStopAtPos(0, 63);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x7ff200000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 61)
                     kind = 61;
                  break;
               case 8:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjAddStates(20, 21);
                  break;
               case 6:
                  jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if ((0x7ff200000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34 && kind > 24)
                     kind = 24;
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 24)
                     kind = 24;
                  break;
               case 8:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 10 && kind > 26)
                     kind = 26;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 13 && kind > 26)
                     kind = 26;
                  break;
               case 12:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x2400L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjAddStates(20, 21);
                  break;
               case 6:
                  jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffc000000000L) != 0L)
         {
            jjmatchedKind = 32;
            return -1;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x1ffc000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xddc000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x4cc000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa1_3(0x1c00000000000L);
      case 60:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_3(0xc000000000000L);
      case 91:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_3(0x600000000L);
      case 93:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_3(0x1000000000L);
      case 123:
         return jjMoveStringLiteralDfa1_3(0x3c000000000L);
      case 124:
         return jjStartNfaWithStates_3(0, 56, 19);
      case 125:
         return jjMoveStringLiteralDfa1_3(0x3c0000000000L);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000000000000L);
      case 39:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0xc00000000000L);
      case 47:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 91:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x200000000L);
      case 93:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 123:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x1c000000000L);
      case 125:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x1c0000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0x400000000000L);
      case 45:
         return jjMoveStringLiteralDfa3_3(active0, 0x8000000000000L);
      case 58:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 123:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0xc000000000L);
      case 125:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private final int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 39:
         return jjMoveStringLiteralDfa4_3(active0, 0x400000000000L);
      case 45:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         break;
      case 123:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000L);
      case 125:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private final int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         break;
      case 123:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         break;
      case 125:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 30;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xcfffff7fffffdbffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 0:
                  if ((0xcfffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar != 47)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xa7ffc04800000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 10:
                  if (curChar != 47)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xa7ffc04800000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if (curChar != 61)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar != 33)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 10 && kind > 67)
                     kind = 67;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 13 && kind > 67)
                     kind = 67;
                  break;
               case 28:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x2400L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2800000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 19;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 0:
                  if ((0xc7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar != 124)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   48, 27, 29, 30, 32, 2, 33, 34, 37, 3, 38, 39, 41, 44, 45, 47, 
   48, 27, 29, 30, 3, 4, 6, 7, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\40", null, "\75", null, null, null, 
"\52", "\43", "\72", null, null, null, "\133\133\72", "\133\133", "\133", "\135\135", 
"\135", "\173\173\173\173\173", "\173\173\173\173", "\173\173\173", "\173\173", 
"\175\175\175\175\175", "\175\175\175\175", "\175\175\175", "\175\175", "\47\47\47\47\47", 
"\47\47\47", "\47\47", "\74", "\74\57", "\74\41\55\55", null, null, null, null, "\174", 
null, "\55\55\76", null, "\75", null, null, "\76", null, null, null, null, null, };
public static final String[] lexStateNames = {
   "APOSTROHE_CATASTROPHE", 
   "EXTENSION", 
   "COMMENT", 
   "LINE_CONTENTS", 
   "LIST_PREFIX", 
   "ATTRIBUTE_CONTENTS", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 3, 3, 3, 3, 3, 3, -1, -1, -1, 
   -1, 6, 4, 4, 4, 3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 1, 
   3, 2, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, 3, -1, 3, 6, -1, 
};
static final long[] jjtoToken = {
   0xffffffffb9ffc001L, 0x1bL, 
};
static final long[] jjtoSkip = {
   0x46000000L, 0x4L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[51];
private final int[] jjstateSet = new int[102];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public MediaWikiParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public MediaWikiParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 6;
int defaultLexState = 6;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 66;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 64;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 30;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default : 
         break;
   }
}
}
